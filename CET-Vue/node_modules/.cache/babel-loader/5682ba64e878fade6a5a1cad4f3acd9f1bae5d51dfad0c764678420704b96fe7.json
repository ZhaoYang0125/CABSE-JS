{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      ruleForm: {\n        uname: \"\",\n        password: \"\"\n      },\n      rules: {\n        uname: [{\n          required: true,\n          message: \"用户名不能为空！\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"密码不能为空！\",\n          trigger: \"blur\"\n        }]\n      },\n      loading: false // 是否显示加载动画\n    };\n  },\n\n  methods: {\n    submitForm(formName) {\n      // 验证表单中的账号密码是否有效，因为在上面rules中定义为了必填 required: true\n      this.$refs[formName].validate(valid => {\n        // 点击登录后，让登录按钮开始转圈圈（展示加载动画）\n        this.loading = true;\n        // 如果经过校验，账号密码都不为空，则发送请求到后端登录接口\n        if (valid) {\n          let _this = this;\n          // 使用 axios 将登录信息发送到后端\n          this.axios({\n            url: \"/api/user/login\",\n            // 请求地址\n            method: \"post\",\n            // 请求方法\n            headers: {\n              // 请求头\n              \"Content-Type\": \"application/json\"\n            },\n            params: {\n              // 请求参数\n              uname: _this.ruleForm.uname,\n              password: _this.ruleForm.password\n            }\n          }).then(res => {\n            // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\n            if (res.data.code === \"0\") {\n              // 当响应的编码为 0 时，说明登录成功\n              // 将用户信息存储到sessionStorage中\n              sessionStorage.setItem(\"userInfo\", JSON.stringify(res.data.data));\n              // 跳转页面到首页\n              this.$router.push('/home');\n              // 显示后端响应的成功信息\n              this.$message({\n                message: res.data.msg,\n                type: \"success\"\n              });\n            } else {\n              // 当响应的编码不为 0 时，说明登录失败\n              // 显示后端响应的失败信息\n              this.$message({\n                message: res.data.msg,\n                type: \"warning\"\n              });\n            }\n            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\n            _this.loading = false;\n            console.log(res);\n          });\n        } else {\n          // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\n          console.log(\"error submit!!\");\n          this.loading = false;\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["data","ruleForm","uname","password","rules","required","message","trigger","loading","methods","submitForm","formName","$refs","validate","valid","_this","axios","url","method","headers","params","then","res","code","sessionStorage","setItem","JSON","stringify","$router","push","$message","msg","type","console","log","resetForm","resetFields"],"sources":["src/views/login/Login.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-card class=\"box-card\">\r\n            <h2>登录</h2>\r\n            <el-form\r\n                    :model=\"ruleForm\"\r\n                    status-icon\r\n                    :rules=\"rules\"\r\n                    ref=\"ruleForm\"\r\n                    label-position=\"left\"\r\n                    label-width=\"70px\"\r\n                    class=\"login-from\"\r\n            >\r\n                <el-form-item label=\"用户名\" prop=\"uname\">\r\n                    <el-input v-model=\"ruleForm.uname\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"密码\" prop=\"password\">\r\n                    <el-input\r\n                            type=\"password\"\r\n                            v-model=\"ruleForm.password\"\r\n                            autocomplete=\"off\"\r\n                    ></el-input>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div class=\"btnGroup\">\r\n                <el-button\r\n                        type=\"primary\"\r\n                        @click=\"submitForm('ruleForm')\"\r\n                        v-loading=\"loading\"\r\n                >登录</el-button\r\n                >\r\n                <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n                <router-link to=\"/register\">\r\n                    <el-button style=\"margin-left: 10px\">注册</el-button>\r\n                </router-link>\r\n            </div>\r\n        </el-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                ruleForm: {\r\n                    uname: \"\",\r\n                    password: \"\",\r\n                },\r\n                rules: {\r\n                    uname: [\r\n                        { required: true, message: \"用户名不能为空！\", trigger: \"blur\" },\r\n                    ],\r\n                    password: [\r\n                        { required: true, message: \"密码不能为空！\", trigger: \"blur\" },\r\n                    ],\r\n                },\r\n                loading: false, // 是否显示加载动画\r\n            };\r\n        },\r\n        methods: {\r\n            submitForm(formName) {\r\n                // 验证表单中的账号密码是否有效，因为在上面rules中定义为了必填 required: true\r\n                this.$refs[formName].validate((valid) => {\r\n                    // 点击登录后，让登录按钮开始转圈圈（展示加载动画）\r\n                    this.loading = true;\r\n                    // 如果经过校验，账号密码都不为空，则发送请求到后端登录接口\r\n                    if (valid) {\r\n                        let _this = this;\r\n                        // 使用 axios 将登录信息发送到后端\r\n                        this.axios({\r\n                            url: \"/api/user/login\",               // 请求地址\r\n                            method: \"post\",                       // 请求方法\r\n                            headers: {                            // 请求头\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            params: {                             // 请求参数\r\n                                uname: _this.ruleForm.uname,\r\n                                password: _this.ruleForm.password,\r\n                            },\r\n                        }).then((res) => { // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\r\n                            if (res.data.code === \"0\") {  // 当响应的编码为 0 时，说明登录成功\r\n                                // 将用户信息存储到sessionStorage中\r\n                                sessionStorage.setItem(\"userInfo\", JSON.stringify(res.data.data));\r\n                                // 跳转页面到首页\r\n                                this.$router.push('/home');\r\n                                // 显示后端响应的成功信息\r\n                                this.$message({\r\n                                    message: res.data.msg,\r\n                                    type: \"success\",\r\n                                });\r\n                            } else {  // 当响应的编码不为 0 时，说明登录失败\r\n                                // 显示后端响应的失败信息\r\n                                this.$message({\r\n                                    message: res.data.msg,\r\n                                    type: \"warning\",\r\n                                });\r\n                            }\r\n                            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\r\n                            _this.loading = false;\r\n                            console.log(res);\r\n                        });\r\n                    } else {  // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\r\n                        console.log(\"error submit!!\");\r\n                        this.loading = false;\r\n                        return false;\r\n                    }\r\n                });\r\n            },\r\n            resetForm(formName) {\r\n                this.$refs[formName].resetFields();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    /* 设置登录面板居中，宽度为400px */\r\n    .box-card {\r\n        margin: auto auto;\r\n        width: 400px;\r\n    }\r\n    /* 设置登录面板中的表单居中 */\r\n    .login-from {\r\n        margin: auto auto;\r\n    }\r\n</style>"],"mappings":";AAyCA;EACAA,KAAA;IACA;MACAC,QAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAF,KAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,QAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAC,OAAA;IACA;EACA;;EACAC,OAAA;IACAC,WAAAC,QAAA;MACA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,QAAA,CAAAC,KAAA;QACA;QACA,KAAAN,OAAA;QACA;QACA,IAAAM,KAAA;UACA,IAAAC,KAAA;UACA;UACA,KAAAC,KAAA;YACAC,GAAA;YAAA;YACAC,MAAA;YAAA;YACAC,OAAA;cAAA;cACA;YACA;YACAC,MAAA;cAAA;cACAlB,KAAA,EAAAa,KAAA,CAAAd,QAAA,CAAAC,KAAA;cACAC,QAAA,EAAAY,KAAA,CAAAd,QAAA,CAAAE;YACA;UACA,GAAAkB,IAAA,CAAAC,GAAA;YAAA;YACA,IAAAA,GAAA,CAAAtB,IAAA,CAAAuB,IAAA;cAAA;cACA;cACAC,cAAA,CAAAC,OAAA,aAAAC,IAAA,CAAAC,SAAA,CAAAL,GAAA,CAAAtB,IAAA,CAAAA,IAAA;cACA;cACA,KAAA4B,OAAA,CAAAC,IAAA;cACA;cACA,KAAAC,QAAA;gBACAxB,OAAA,EAAAgB,GAAA,CAAAtB,IAAA,CAAA+B,GAAA;gBACAC,IAAA;cACA;YACA;cAAA;cACA;cACA,KAAAF,QAAA;gBACAxB,OAAA,EAAAgB,GAAA,CAAAtB,IAAA,CAAA+B,GAAA;gBACAC,IAAA;cACA;YACA;YACA;YACAjB,KAAA,CAAAP,OAAA;YACAyB,OAAA,CAAAC,GAAA,CAAAZ,GAAA;UACA;QACA;UAAA;UACAW,OAAA,CAAAC,GAAA;UACA,KAAA1B,OAAA;UACA;QACA;MACA;IACA;IACA2B,UAAAxB,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAyB,WAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}