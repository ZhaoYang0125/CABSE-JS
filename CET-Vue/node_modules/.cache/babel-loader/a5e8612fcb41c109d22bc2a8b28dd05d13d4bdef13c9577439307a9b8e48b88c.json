{"ast":null,"code":"export default {\n  data() {\n    var validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));\n      } else {\n        if (this.ruleForm.checkPass !== \"\") {\n          this.$refs.ruleForm.validateField(\"checkPass\");\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请再次输入密码\"));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error(\"两次输入密码不一致!\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        uname: \"\",\n        pass: \"\",\n        password: \"\"\n      },\n      rules: {\n        uname: [{\n          required: true,\n          message: \"用户名不能为空！\",\n          trigger: \"blur\"\n        }],\n        pass: [{\n          required: true,\n          validator: validatePass,\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          validator: validatePass2,\n          trigger: \"blur\"\n        }]\n      },\n      loading: false\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        this.loading = true; // 提交按钮显示加载动画\n        if (valid) {\n          let _this = this;\n          this.axios({\n            // axios 向后端发起请求\n            url: \"/api/user/register\",\n            // 请求地址\n            method: \"post\",\n            // 请求方法\n            headers: {\n              // 请求头\n              \"Content-Type\": \"application/json\"\n            },\n            data: {\n              // 请求参数，为 data，与登录的 params 不太一样\n              userName: _this.ruleForm.uname,\n              passWord: _this.ruleForm.password\n            }\n          }).then(res => {\n            // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\n            if (res.data.code === '0') {\n              // 当响应的编码为 0 时，说明注册成功\n              // 显示后端响应的成功信息\n              this.$message({\n                message: res.data.msg,\n                type: \"success\"\n              });\n            } else {\n              // 当响应的编码不为 0 时，说明注册失败\n              // 显示后端响应的失败信息\n              this.$message({\n                message: res.data.msg,\n                type: \"warning\"\n              });\n            }\n            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\n            _this.loading = false;\n            console.log(res);\n          });\n        } else {\n          // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\n          console.log(\"error submit!!\");\n          this.loading = false;\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    goBack() {\n      this.$router.go(-1);\n    }\n  }\n};","map":{"version":3,"names":["data","validatePass","rule","value","callback","Error","ruleForm","checkPass","$refs","validateField","validatePass2","pass","uname","password","rules","required","message","trigger","validator","loading","methods","submitForm","formName","validate","valid","_this","axios","url","method","headers","userName","passWord","then","res","code","$message","msg","type","console","log","resetForm","resetFields","goBack","$router","go"],"sources":["src/views/register/Register.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-card class=\"box-card\">\r\n            <h2>注册</h2>\r\n            <el-form\r\n                    :model=\"ruleForm\"\r\n                    status-icon\r\n                    :rules=\"rules\"\r\n                    ref=\"ruleForm\"\r\n                    label-position=\"left\"\r\n                    label-width=\"80px\"\r\n                    class=\"demo-ruleForm\"\r\n            >\r\n                <el-form-item label=\"用户名\" prop=\"uname\">\r\n                    <el-input v-model=\"ruleForm.uname\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"密码\" prop=\"pass\">\r\n                    <el-input\r\n                            type=\"password\"\r\n                            v-model=\"ruleForm.pass\"\r\n                            autocomplete=\"off\"\r\n                    ></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"确认密码\" prop=\"password\">\r\n                    <el-input\r\n                            type=\"password\"\r\n                            v-model=\"ruleForm.password\"\r\n                            autocomplete=\"off\"\r\n                    ></el-input>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div class=\"btnGroup\">\r\n                <el-button type=\"primary\" @click=\"submitForm('ruleForm')\"  v-loading=\"loading\"\r\n                >提交</el-button\r\n                >\r\n                <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n                <el-button @click=\"goBack\">返回</el-button>\r\n            </div>\r\n        </el-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            var validatePass = (rule, value, callback) => {\r\n                if (value === \"\") {\r\n                    callback(new Error(\"请输入密码\"));\r\n                } else {\r\n                    if (this.ruleForm.checkPass !== \"\") {\r\n                        this.$refs.ruleForm.validateField(\"checkPass\");\r\n                    }\r\n                    callback();\r\n                }\r\n            };\r\n            var validatePass2 = (rule, value, callback) => {\r\n                if (value === \"\") {\r\n                    callback(new Error(\"请再次输入密码\"));\r\n                } else if (value !== this.ruleForm.pass) {\r\n                    callback(new Error(\"两次输入密码不一致!\"));\r\n                } else {\r\n                    callback();\r\n                }\r\n            };\r\n            return {\r\n                ruleForm: {\r\n                    uname: \"\",\r\n                    pass: \"\",\r\n                    password: \"\",\r\n                },\r\n                rules: {\r\n                    uname: [\r\n                        { required: true, message: \"用户名不能为空！\", trigger: \"blur\" },\r\n                    ],\r\n                    pass: [{ required: true, validator: validatePass, trigger: \"blur\" }],\r\n                    password: [\r\n                        { required: true, validator: validatePass2, trigger: \"blur\" },\r\n                    ],\r\n                },\r\n                loading: false\r\n            };\r\n        },\r\n        methods: {\r\n            submitForm(formName) {\r\n                this.$refs[formName].validate((valid) => {\r\n                    this.loading = true;  // 提交按钮显示加载动画\r\n                    if (valid) {\r\n                        let _this = this;\r\n                        this.axios({     // axios 向后端发起请求\r\n                            url: \"/api/user/register\",  // 请求地址\r\n                            method: \"post\",             // 请求方法\r\n                            headers: {                  // 请求头\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            data: { // 请求参数，为 data，与登录的 params 不太一样\r\n                                userName: _this.ruleForm.uname,\r\n                                passWord: _this.ruleForm.password,\r\n                            },\r\n                        }).then((res) => { // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\r\n                            if (res.data.code === '0') {  // 当响应的编码为 0 时，说明注册成功\r\n                                // 显示后端响应的成功信息\r\n                                this.$message({\r\n                                    message: res.data.msg,\r\n                                    type: \"success\",\r\n                                });\r\n                            }else{  // 当响应的编码不为 0 时，说明注册失败\r\n                                // 显示后端响应的失败信息\r\n                                this.$message({\r\n                                    message: res.data.msg,\r\n                                    type: \"warning\",\r\n                                });\r\n                            }\r\n                            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\r\n                            _this.loading = false;\r\n                            console.log(res);\r\n                        });\r\n                    } else { // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\r\n                        console.log(\"error submit!!\");\r\n                        this.loading = false;\r\n                        return false;\r\n                    }\r\n                });\r\n            },\r\n            resetForm(formName) {\r\n                this.$refs[formName].resetFields();\r\n            },\r\n            goBack() {\r\n                this.$router.go(-1);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    /* 设置登录面板居中，宽度为400px */\r\n    .box-card {\r\n        margin: auto auto;\r\n        width: 400px;\r\n    }\r\n    /* 设置登录面板中的表单居中 */\r\n    .login-from {\r\n        margin: auto auto;\r\n    }\r\n</style>"],"mappings":"AA2CA;EACAA,KAAA;IACA,IAAAC,YAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACA,SAAAC,QAAA,CAAAC,SAAA;UACA,KAAAC,KAAA,CAAAF,QAAA,CAAAG,aAAA;QACA;QACAL,QAAA;MACA;IACA;IACA,IAAAM,aAAA,GAAAA,CAAAR,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAG,QAAA,CAAAK,IAAA;QACAP,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAE,QAAA;QACAM,KAAA;QACAD,IAAA;QACAE,QAAA;MACA;MACAC,KAAA;QACAF,KAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,IAAA;UAAAI,QAAA;UAAAG,SAAA,EAAAjB,YAAA;UAAAgB,OAAA;QAAA;QACAJ,QAAA,GACA;UAAAE,QAAA;UAAAG,SAAA,EAAAR,aAAA;UAAAO,OAAA;QAAA;MAEA;MACAE,OAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,QAAA;MACA,KAAAd,KAAA,CAAAc,QAAA,EAAAC,QAAA,CAAAC,KAAA;QACA,KAAAL,OAAA;QACA,IAAAK,KAAA;UACA,IAAAC,KAAA;UACA,KAAAC,KAAA;YAAA;YACAC,GAAA;YAAA;YACAC,MAAA;YAAA;YACAC,OAAA;cAAA;cACA;YACA;YACA7B,IAAA;cAAA;cACA8B,QAAA,EAAAL,KAAA,CAAAnB,QAAA,CAAAM,KAAA;cACAmB,QAAA,EAAAN,KAAA,CAAAnB,QAAA,CAAAO;YACA;UACA,GAAAmB,IAAA,CAAAC,GAAA;YAAA;YACA,IAAAA,GAAA,CAAAjC,IAAA,CAAAkC,IAAA;cAAA;cACA;cACA,KAAAC,QAAA;gBACAnB,OAAA,EAAAiB,GAAA,CAAAjC,IAAA,CAAAoC,GAAA;gBACAC,IAAA;cACA;YACA;cAAA;cACA;cACA,KAAAF,QAAA;gBACAnB,OAAA,EAAAiB,GAAA,CAAAjC,IAAA,CAAAoC,GAAA;gBACAC,IAAA;cACA;YACA;YACA;YACAZ,KAAA,CAAAN,OAAA;YACAmB,OAAA,CAAAC,GAAA,CAAAN,GAAA;UACA;QACA;UAAA;UACAK,OAAA,CAAAC,GAAA;UACA,KAAApB,OAAA;UACA;QACA;MACA;IACA;IACAqB,UAAAlB,QAAA;MACA,KAAAd,KAAA,CAAAc,QAAA,EAAAmB,WAAA;IACA;IACAC,OAAA;MACA,KAAAC,OAAA,CAAAC,EAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}